#!/usr/bin/env python3
import sys

if sys.version_info < (3, 10):
    raise RuntimeError("Required Python >= 3.10")

import argparse
import os
from datetime import date, datetime
from pathlib import Path
from subprocess import run

import fnmeta


def timestamp_arg(v: str) -> datetime:
    for fmt in [
        "%Y-%m-%d %H:%M:%S",
        "%Y-%m-%dT%H:%M:%SZ",
        "%Y-%m-%d %H:%M:%S.%f",
        "%Y-%m-%dT%H:%M:%S.%fZ",
        "%H:%M:%S",
        "%H%M%S",
    ]:
        try:
            dt = datetime.strptime(v, fmt)
            if dt.date() == date(1900, 1, 1):
                now = datetime.utcnow()
                dt = dt.replace(year=now.year, month=now.month, day=now.day)
            return dt
        except (ValueError, TypeError):
            continue
    raise ValueError("invalid timestmap format")


def output_fn(sat: str, granule: datetime) -> str:
    tag = {
        "m": "SVM",
        "i": "SVI",
        "d": "DNB",
    }.get(args.band_type, "SDR")
    now = datetime.utcnow()
    return f"IFF{tag}_{sat}_d{granule:%Y%m%d}_d{granule:%H%M%S}_c{now:%Y%m%d%H%M%S}_ssec_dev.{args.output_type}"


parser = argparse.ArgumentParser()
parser.add_argument("-o", "--output", type=Path)
parser.add_argument("--compression", type=int, default=0)
parser.add_argument("--output-type", choices=["nc", "hdf"], default="nc")
parser.add_argument("--band_type", choices=["m", "i", "d"], default="m")
parser.add_argument("l1b", type=Path)
parser.add_argument("geo", type=Path)
args = parser.parse_args()

ident = fnmeta.identify(args.l1b)
if not ident:
    parser.error(f"Fnmeta failed to identify {args.l1b}")

satellite = ident["satellite"]["name"]
output = output_fn(satellite, ident["begin_time"])

cmd = [
    "iff2",
    "--verbose",
    f"--compression={args.compression}",
    f"--output={output}",
    "--hdf4" if args.output_type == "hdf" else "",
    ident["satellite"]["name"],
    "viirs-nasa",
    {"i": "svi", "d": "dnb", "m": "svm"}[args.band_type],
    ident["begin_time"].strftime("%Y%m%d"),
    ident["begin_time"].strftime("%H%M%S"),
    ident["end_time"].strftime("%H%M%S"),
    args.geo,
    args.l1b,
]

print("Running: iff2" + " ".join([str(x) for x in cmd]))

# run(cmd, check=True)
os.execvp("iff2", cmd)
