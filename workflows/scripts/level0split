#!/usr/bin/env python3
"""Split 2h Level-0 Time-based files into 6-min files."""
import argparse
import json
import logging
import subprocess
from datetime import datetime, timedelta, timezone
from pathlib import Path

LOG = logging

parser = argparse.ArgumentParser()
parser.add_argument(
    "--outdir", type=Path, default=Path("outputs"), help="directory to save outputs to"
)
parser.add_argument(
    "--output",
    type=Path,
    default="output.json",
)
parser.add_argument("indir", type=Path)
args = parser.parse_args()

logging.basicConfig(level=logging.INFO, format="%(message)s")

if not args.indir.is_dir():
    parser.error(f"indir {args.indir} does not exist")
args.outdir.mkdir(exist_ok=True, mode=0o775)


def run(cmd, **kwds) -> subprocess.CompletedProcess:
    kwds.setdefault("check", True)
    cmd = [str(x) for x in cmd]
    LOG.info("%s", " ".join(cmd))
    return subprocess.run(cmd, **kwds)


def get_dest(fpath: Path, dt: datetime) -> Path:
    return args.outdir / f"{fpath.name[:22]}{dt:%y%j%H%M%S}{fpath.name[-7:]}"


def get_times(fpath: Path) -> tuple[datetime, datetime]:
    """Use the first packet time in the file to determine the start/end times of the file."""
    cmd = [
        "ccsds",
        "info",
        "--format=json",
        fpath,
    ]
    proc = run(cmd, capture_output=True)
    zult = json.loads(proc.stdout)
    dt = datetime.strptime(
        zult["summary"]["first_packet_time"],
        "%Y-%m-%dT%H:%M:%S.%fZ",
    ).replace(tzinfo=timezone.utc)

    return (
        start := datetime.fromtimestamp(
            dt.timestamp() - dt.timestamp() % 7200, timezone.utc
        ),
        start + timedelta(hours=2),
    )


outputs = {"items": []}
for fpath in args.indir.glob("*.PDS"):
    start, end = get_times(fpath)
    LOG.info("splitting file %s for time %s", fpath.name, start)
    for i in range(20):
        gran_start = start + timedelta(minutes=i * 6)
        gran_end = gran_start + timedelta(minutes=6)
        destpath = get_dest(fpath, gran_start)
        cmd = [
            "ccsds",
            "filter",
            "--clobber",
            "-o",
            str(destpath),
            "--before",
            gran_start.strftime("%Y-%m-%dT%H:%M:%SZ"),
            "--after",
            gran_end.strftime("%Y-%m-%dT%H:%M:%SZ"),
            str(fpath),
        ]
        run(cmd)
        outputs["items"].append(str(destpath))

json.dump(outputs, open(args.output, "wt"), indent=2)
