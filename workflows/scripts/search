#!/usr/bin/env python3
"""Perform all defined searches generating a STAC FeatureCollection.

The output format is an approximation of what would be returned from
the NASA CMR STAC catalog based on the results I get from the following:

    https://cmr.earthdata.nasa.gov/stac/ASIPS/search?collections=CLDMSK_L2_VIIRS_NOAA20_NRT.v1&datetime=2024-07-10T00:00:00Z/2024-07-11T00:00:00Z&limit=10

Input doc format:
{
    "items": [
        {
            # Dawgfs search params
            "product": ...,
            "timerange": ...,
            "satellite": ...,
        },
        ...
    ]
}
"""
import argparse
import json
import logging
import os
from pathlib import Path

import requests

LOG = logging

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("--verbose", action="store_true")
parser.add_argument(
    "--token-file",
    type=Path,
    default=Path.home() / ".config/asipscli.json",
    help="API token",
)
parser.add_argument("search", type=Path, help="JSON search doc")
args = parser.parse_args()

lvl = logging.DEBUG if args.verbose else logging.INFO
logging.basicConfig(
    level=logging.DEBUG if args.verbose else logging.INFO,
    format="%(message)s",
)

doc = json.load(open(args.search))


def get_token() -> str:
    LOG.info("loading token from %s", args.token_file)
    if not args.token_file.exists():
        raise ValueError(f"token file {args.token_file} does not exist")
    return json.load(open(args.token_file)).get("token")


# reuse connections
session = requests.Session()
session.headers = {"x-api-token": get_token()}


api_base_url = doc.get("api_base_url", "https://sips.ssec.wisc.edu/api/v2")

catalog = {
    "type": "FeatureCollection",
    "features": [],
    "items": [],
}
required_keys = {"product", "timerange", "satellite"}
for item in doc.get("items", []):
    if missing := required_keys - set(item.keys()).intersection(required_keys):
        LOG.warning(
            "item missing required keys, skipping: missing=%s, item=%s", missing, item
        )
        continue
    url = (
        f"{api_base_url}/files/search.json?"
        f"products={item['product']}"
        f"&timerange={item['timerange']}"
        f"&satellite={item['satellite']}"
    )
    LOG.debug("%s", url)
    resp = session.get(url, timeout=10)
    resp.raise_for_status()
    for file in resp.json().get("data", []):
        catalog["items"].append(
            {
                "type": "Feature",
                "stac_version": "1.0.0",
                "id": file["name"],
                "geometry": None,
                "properties": {
                    "datetime": file["begin_time"],
                    "start_datetime": file["begin_time"],
                    "end_datetime": file["end_time"],
                    "checksum": file["checksum"],
                },
                "links": [],
                "assets": [{"type": "data", "href": file["urls"]["public"]}],
            }
        )

print(json.dumps(catalog, indent=2))
