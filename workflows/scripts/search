#!/usr/bin/env python3
"""Perform all defined searches generating a STAC FeatureCollection.

The output format is an approximation of what would be returned from
the NASA CMR STAC catalog based on the results I get from the following:

    https://cmr.earthdata.nasa.gov/stac/ASIPS/search?collections=CLDMSK_L2_VIIRS_NOAA20_NRT.v1&datetime=2024-07-10T00:00:00Z/2024-07-11T00:00:00Z&limit=10
"""
import argparse
import json
import logging
import sys
from datetime import datetime
from pathlib import Path

import requests
from pystac import Asset, Item, ItemCollection

LOG = logging


def get_token(token_file: Path) -> str:
    LOG.info("loading token from %s", token_file)
    if not token_file.exists():
        raise ValueError(f"token file {args.token_file} does not exist")
    return json.load(open(token_file)).get("token")


def parse_timestamp(v: str) -> datetime:
    return datetime.strptime(v, "%Y-%m-%dT%H:%M:%S.%fZ")


def get_files(product: str, start: datetime, end: datetime, satellite: str) -> list[dict]:
    url = (
        f"{api_base_url}/files/search.json?"
        f"products={product}"
        f"&timerange={start:%Y-%m-%dT%H:%M:%SZ},{end:%Y-%m-%dT%H:%M:%SZ}"
        f"&satellite={satellite}"
    )
    LOG.debug("%s", url)
    resp = session.get(url, timeout=10)
    if not resp.ok:
        print(resp.text, file=sys.stderr)
    resp.raise_for_status()
    return resp.json().get("data", [])


api_base_url = "https://sips.ssec.wisc.edu/api/v2"

# reuse connections
session = requests.Session()


def main(args: argparse.Namespace):

    files = []
    for product in args.product:
        files += get_files(product, args.start, args.end, args.satellite)

    items = []
    for file in files:
        items.append(
            Item(
                id=file["name"],
                geometry=None,
                bbox=None,
                properties={
                    "checksum": file["checksum"],
                },
                datetime=parse_timestamp(file["begin_time"]),
                start_datetime=parse_timestamp(file["begin_time"]),
                end_datetime=parse_timestamp(file["end_time"]),
                assets={"data": Asset(href=file["urls"]["public"], roles=["data"])},
            )
        )
    collection = ItemCollection(items=items)
    print(json.dumps(collection.to_dict(), indent=2))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument(
        "--token-file",
        type=Path,
        default=Path.home() / ".config/asipscli.json",
        help="API token",
    )


    def timestamp(v):
        return datetime.strptime(v, "%Y-%m-%dT%H:%M:%SZ")


    parser.add_argument("-p", "--product", action="append", help="dawg product name", required=True)
    parser.add_argument("-s", "--start", type=timestamp, required=True)
    parser.add_argument("-e", "--end", type=timestamp, required=True)
    parser.add_argument("--satellite", choices=["", "snpp", "noaa20", "noaa21"], required=True)
    args = parser.parse_args()

    lvl = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=logging.DEBUG if args.verbose else logging.INFO,
        format="%(message)s",
    )

    session.headers = {"x-api-token": get_token(args.token_file)}

    main(args)
