#!/usr/bin/env python3
import argparse
import logging
import os
from datetime import datetime
from pathlib import Path

import fnmeta
import pystac
from pystac import Asset, Catalog, CatalogType, Item

LOG = logging.getLogger(Path(__file__).name)


def get_times(fpath: Path) -> "tuple[datetime, datetime] | None":
    meta = fnmeta.identify(fpath.name) or {}
    if fpath.suffix.lower() == ".pds" and "created" in meta:
        return meta["created"], meta["created"]
    if "begin_time" in meta and "end_time" in meta:
        return meta["begin_time"], meta["end_time"]
    if "begin_time" in meta:
        return meta["begin_time"], meta["begin_time"]
    return None


def generate_catalog(patterns: list[str], basedir: Path):
    catalog = Catalog("catgen", "catalog generated by catgen")
    for i, pattern in enumerate(patterns):
        collection_id = ""
        if "," in pattern:
            pattern, collection_id = pattern.rsplit(",", 1)
        subcat = Catalog(
            collection_id or f"collection-{i}", f"subcatalog for pattern {pattern}"
        )
        dirpath, pattern = os.path.split(pattern)
        for fpath in Path(dirpath).glob(pattern):
            times = get_times(fpath)
            if not times:
                LOG.warning(
                    "failed to determine file times for %s; skipping", fpath.name
                )
                continue
            start, end = times
            try:
                item = Item(
                    id=fpath.name.rsplit(".", 1)[0],
                    geometry=None,
                    bbox=None,
                    properties={},
                    datetime=start,
                    start_datetime=start,
                    end_datetime=end,
                    assets={"data": Asset(href=str(fpath.absolute()), roles=["data"])},
                    # set collection kws only if one was specified as part of pattern
                    **({"collection": collection_id} if collection_id else {}),  # type: ignore
                )
                subcat.add_item(item)
            except pystac.STACError:
                LOG.exception("failed to create or add item for %s", fpath.name)
                continue
        catalog.add_child(subcat)
    catalog.normalize_hrefs(str(basedir))
    catalog.make_all_asset_hrefs_relative()
    catalog.save(catalog_type=CatalogType.SELF_CONTAINED)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument(
        "-p",
        "--file-pattern",
        action="append",
        metavar="PATTERN",
        dest="patterns",
        required=True,
        help=(
            "Glob style file pattern(s) to include in catalog. This can optionally "
            "be a comma separated <pattern>,<collection_id> where each file matched "
            "by the pattern will get a collection property set to collection_id. If "
            "not comma separated items will have no collection property."
        ),
    )
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO, format="%(message)s")
    LOG.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    generate_catalog(args.patterns, basedir=Path("."))
