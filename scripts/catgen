#!/usr/bin/env python3
"""Create a STAC Catalog from file glob patterns.

Asset paths will be relative to the catalog which will be written to CWD.
"""
import argparse
import json
import logging
import os
from datetime import datetime
from pathlib import Path

import fnmeta
import pystac
from pystac import (Asset, Catalog, CatalogType, Item, ItemCollection, Link,
                    RelType)

LOG = logging.getLogger("catgen")


def get_times(fpath: Path) -> "tuple[datetime, datetime] | None":
    meta = fnmeta.identify(fpath.name) or {}
    if fpath.suffix.lower() == ".pds" and "created" in meta:
        # TODO: check meta["rec_type"] to determine what end time should be
        return meta["created"], meta["created"]
    if "begin_time" in meta and "end_time" in meta:
        return meta["begin_time"], meta["end_time"]
    if "begin_time" in meta:
        return meta["begin_time"], meta["begin_time"]
    return None


def generate_collection(
    inputs: list[tuple[str, Path]],
    basedir: Path,
) -> ItemCollection:
    items: list[Item] = []

    for collection_id, pattern in inputs:
        dirpath, pattern = os.path.split(pattern)
        for fpath in Path(dirpath).glob(pattern):
            LOG.debug("adding datafile %s", fpath)
            times = get_times(fpath)
            if not times:
                LOG.warning("failed to determine file times for %s; skipping", fpath.name)
                continue
            start, end = times

            try:
                item = Item(
                    id=fpath.name.rsplit(".", 1)[0],
                    geometry=None,
                    bbox=None,
                    properties={},
                    datetime=start,
                    start_datetime=start,
                    end_datetime=end,
                    # The href will alway automatically be update to be absolute which will 
                    # likely break consumers of this collection, so don't set it. Let consumers 
                    # assume the asset paths are relateive to basedir.
                    # href=str(basedir),
                    assets={
                        fpath.name: Asset(
                            href=str(fpath.relative_to(basedir)), roles=["data"]
                        ),
                    },
                    collection=collection_id
                )
                items.append(item)
            except pystac.STACError:
                LOG.exception("failed to create or add item for %s", fpath.name)
                continue

    if len(items) == 0:
        raise ValueError("(catgen) Failed to catalog any files")

    collection = ItemCollection(items)
    (basedir / "catalog.json").write_text(json.dumps(collection.to_dict(), indent=2))
    return collection


def generate_catalog(
    inputs: list[tuple[str, Path]],
    basedir: Path,
) -> Catalog:

    catalog = Catalog("catgen", description="STAC Catalog generated by catgen")
    catalog.add_link(Link(RelType.SELF, str(basedir / "catalog.json")))

    for collection_id, pattern in inputs:
        dirpath, pattern = os.path.split(pattern)

        for fpath in Path(dirpath).glob(pattern):
            LOG.debug("adding datafile %s", fpath)
            times = get_times(fpath)
            if not times:
                LOG.warning("failed to determine file times for %s; skipping", fpath.name)
                continue
            start, end = times
            try:
                item = Item(
                    id=fpath.name.rsplit(".", 1)[0],
                    geometry=None,
                    bbox=None,
                    properties={},
                    datetime=start,
                    start_datetime=start,
                    end_datetime=end,
                    assets={
                        fpath.name: Asset(href=str(fpath), roles=["data"]),
                    },
                    collection=collection_id,
                )
                meta_path = fpath.with_suffix(".json")
                LOG.debug("adding metadata %s", meta_path)
                item.add_asset(
                    meta_path.name, Asset(href=str(meta_path), roles=["metadata"])
                )
                json.dump(item.to_dict(), open(meta_path, "w"))

                catalog.add_link(Link(RelType.ITEM, str(meta_path), "application/json"))
            except pystac.STACError:
                LOG.exception("failed to create or add item for %s", fpath.name)
                continue

    if len(list(catalog.get_all_items())) == 0:
        raise ValueError("(catgen) Failed to catalog any files")

    # catalog.normalize_hrefs(str(basedir.absolute()))
    catalog.make_all_asset_hrefs_relative()
    catalog.save(catalog_type=CatalogType.SELF_CONTAINED)

    return catalog


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--verbose", action="store_true")
    parser.add_argument(
        "-t",
        "--type",
        choices=["catalog", "collection"],
        default="catalog",
        help="Write either a Catalog or FeatureCollection",
    )
    def inputtype(v: str) -> tuple[str, Path]:
        r = [s.strip() for s in v.split(",")]
        return r[0], Path(r[1]).absolute()

    parser.add_argument(
        "input",
        nargs="+",
        metavar="SPEC",
        type=inputtype,
        help=(
            "Where SPEC is <collection_id>,<file-pattern>; file-pattern is a shell style "
            "glob pattern. Each file found matching file-pattern will be assigned a collection "
            "id of collection. One or more items must be specified."),
    )
    args = parser.parse_args()

    print(args.input)

    logging.basicConfig(level=logging.INFO, format="%(name)s -- %(message)s")
    LOG.setLevel(logging.DEBUG if args.verbose else logging.INFO)

    catalog = globals()[f"generate_{args.type}"](
        args.input,
        basedir=Path(".").absolute(),
    )
    if args.verbose:
        catalog.describe(include_hrefs=True)
